
new_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001426  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c61  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000034d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061b  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000add  00000000  00000000  00003e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  74:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <interrupt_fn>:
	carYELLOWLED_BLINKING();
}

static void interrupt_fn()
{
	if(state != RED)
  7c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	19 f0       	breq	.+6      	; 0x8a <interrupt_fn+0xe>
	{
		interruptfn1();
  84:	0e 94 a0 03 	call	0x740	; 0x740 <interruptfn1>
  88:	08 95       	ret
	}
	else
	{
		interruptfn2();
  8a:	0e 94 b7 03 	call	0x76e	; 0x76e <interruptfn2>
  8e:	08 95       	ret

00000090 <APP_init>:

EN_CARLEDSTATE state;

void APP_init()
{
	init_leds();
  90:	0e 94 07 03 	call	0x60e	; 0x60e <init_leds>
  94:	08 95       	ret

00000096 <APP_start>:
and the initial value = 12 => 0x0c
*/


void APP_start()
{
  96:	cf 93       	push	r28
	state = GREEN;
  98:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <state>
	car_GREENLED_ON();
  9c:	0e 94 90 03 	call	0x720	; 0x720 <car_GREENLED_ON>
	state = YELLOW;
  a0:	c1 e0       	ldi	r28, 0x01	; 1
  a2:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <state>
	carYELLOWLED_BLINKING();
  a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <carYELLOWLED_BLINKING>
	state = RED;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
	car_REDLED_ON();
  b0:	0e 94 98 03 	call	0x730	; 0x730 <car_REDLED_ON>
	state = YELLOW;
  b4:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <state>
	carYELLOWLED_BLINKING();
  b8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <carYELLOWLED_BLINKING>
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <__vector_1>:
}



ISR(EXT_INT_0)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	if(intial == 1)
  e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <intial>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	39 f4       	brne	.+14     	; 0xf8 <__vector_1+0x38>
	{
		BUTTON_isLongPress(2, PORT_D, interrupt_fn);	
  ea:	4e e3       	ldi	r20, 0x3E	; 62
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	64 e4       	ldi	r22, 0x44	; 68
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 97 00 	call	0x12e	; 0x12e <BUTTON_isLongPress>
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_1+0x3e>
	}
	else
	{
		intial++;
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <intial>
	}
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <BUTTON_init>:


//INTIALIZING BUTTON
void BUTTON_init(uint8_t pinNum, uint8_t portNum)
{
	DIO_init(pinNum,portNum, IN);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_init>
 126:	08 95       	ret

00000128 <BUTTON_start>:
}

//STARTING BUTTON
void BUTTON_start(uint8_t pinNum, uint8_t portNum, uint8_t *value)
{
	DIO_read(pinNum,portNum, value);
 128:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_read>
 12c:	08 95       	ret

0000012e <BUTTON_isLongPress>:
}

//isLongPress
void BUTTON_isLongPress(uint8_t pinNum, uint8_t portNum, void (*fn)())
{
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	08 2f       	mov	r16, r24
 13c:	16 2f       	mov	r17, r22
 13e:	7a 01       	movw	r14, r20
	uint8_t *val = 0;
	for (int i = 0; i<= 10000; i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	0e c0       	rjmp	.+28     	; 0x162 <BUTTON_isLongPress+0x34>
	{
		BUTTON_start(pinNum, portNum, val);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	61 2f       	mov	r22, r17
 14c:	80 2f       	mov	r24, r16
 14e:	0e 94 94 00 	call	0x128	; 0x128 <BUTTON_start>
		if(*val == 0)
 152:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 156:	81 11       	cpse	r24, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <BUTTON_isLongPress+0x32>
		{
			fn();
 15a:	f7 01       	movw	r30, r14
 15c:	09 95       	icall
			return ;
 15e:	05 c0       	rjmp	.+10     	; 0x16a <BUTTON_isLongPress+0x3c>

//isLongPress
void BUTTON_isLongPress(uint8_t pinNum, uint8_t portNum, void (*fn)())
{
	uint8_t *val = 0;
	for (int i = 0; i<= 10000; i++)
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	c1 31       	cpi	r28, 0x11	; 17
 164:	f7 e2       	ldi	r31, 0x27	; 39
 166:	df 07       	cpc	r29, r31
 168:	74 f3       	brlt	.-36     	; 0x146 <BUTTON_isLongPress+0x18>
		{
			fn();
			return ;
		}
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <LED_init>:
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_init>
 17e:	08 95       	ret

00000180 <LED_on>:
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_write>
 186:	08 95       	ret

00000188 <LED_off>:
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_write>
 18e:	08 95       	ret

00000190 <LED_toggle>:
 190:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_toggle>
 194:	08 95       	ret

00000196 <main>:

#include "Application/app.h"

int main(void)
{
    APP_init();
 196:	0e 94 48 00 	call	0x90	; 0x90 <APP_init>
	
    while (1) 
    {
		APP_start();
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <APP_start>
 19e:	fd cf       	rjmp	.-6      	; 0x19a <main+0x4>

000001a0 <DIO_init>:
		and if it is out make the pin an output
*/

void DIO_init(uint8_t pinNum, uint8_t portNum, uint8_t direction)
{
	switch(portNum)
 1a0:	62 34       	cpi	r22, 0x42	; 66
 1a2:	49 f1       	breq	.+82     	; 0x1f6 <DIO_init+0x56>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <DIO_init+0xc>
 1a6:	61 34       	cpi	r22, 0x41	; 65
 1a8:	41 f0       	breq	.+16     	; 0x1ba <DIO_init+0x1a>
 1aa:	08 95       	ret
 1ac:	63 34       	cpi	r22, 0x43	; 67
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <DIO_init+0x12>
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <DIO_init+0x92>
 1b2:	64 34       	cpi	r22, 0x44	; 68
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_init+0x18>
 1b6:	5a c0       	rjmp	.+180    	; 0x26c <DIO_init+0xcc>
 1b8:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN)
 1ba:	41 11       	cpse	r20, r1
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <DIO_init+0x36>
				CLEAR_BIT(DDRA, pinNum);
 1be:	9a b3       	in	r25, 0x1a	; 26
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	08 2e       	mov	r0, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_init+0x2c>
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_init+0x28>
 1d0:	20 95       	com	r18
 1d2:	29 23       	and	r18, r25
 1d4:	2a bb       	out	0x1a, r18	; 26
			if(direction == OUT)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_init+0x3c>
 1da:	64 c0       	rjmp	.+200    	; 0x2a4 <DIO_init+0x104>
				SET_BIT(DDRA, pinNum);
 1dc:	4a b3       	in	r20, 0x1a	; 26
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0x4a>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0x46>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	8a bb       	out	0x1a, r24	; 26
 1f4:	08 95       	ret

		break;
		case PORT_B:
			if(direction == IN)
 1f6:	41 11       	cpse	r20, r1
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <DIO_init+0x72>
				CLEAR_BIT(DDRB, pinNum);
 1fa:	97 b3       	in	r25, 0x17	; 23
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	08 2e       	mov	r0, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_init+0x68>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_init+0x64>
 20c:	20 95       	com	r18
 20e:	29 23       	and	r18, r25
 210:	27 bb       	out	0x17, r18	; 23
			if(direction == OUT)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <DIO_init+0x78>
 216:	46 c0       	rjmp	.+140    	; 0x2a4 <DIO_init+0x104>
				SET_BIT(DDRB, pinNum);
 218:	47 b3       	in	r20, 0x17	; 23
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	b9 01       	movw	r22, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0x86>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	8a 95       	dec	r24
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0x82>
 22a:	cb 01       	movw	r24, r22
 22c:	84 2b       	or	r24, r20
 22e:	87 bb       	out	0x17, r24	; 23
 230:	08 95       	ret
		break;
		case PORT_C :
			if(direction == IN)
 232:	41 11       	cpse	r20, r1
 234:	0c c0       	rjmp	.+24     	; 0x24e <DIO_init+0xae>
				CLEAR_BIT(DDRC, pinNum);
 236:	94 b3       	in	r25, 0x14	; 20
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	08 2e       	mov	r0, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_init+0xa4>
 240:	22 0f       	add	r18, r18
 242:	33 1f       	adc	r19, r19
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_init+0xa0>
 248:	20 95       	com	r18
 24a:	29 23       	and	r18, r25
 24c:	24 bb       	out	0x14, r18	; 20
			if(direction == OUT)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	49 f5       	brne	.+82     	; 0x2a4 <DIO_init+0x104>
				SET_BIT(DDRC, pinNum);
 252:	44 b3       	in	r20, 0x14	; 20
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_init+0xc0>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_init+0xbc>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	84 bb       	out	0x14, r24	; 20
 26a:	08 95       	ret
		break;
		case PORT_D:
			if(direction == IN)
 26c:	41 11       	cpse	r20, r1
 26e:	0c c0       	rjmp	.+24     	; 0x288 <DIO_init+0xe8>
				CLEAR_BIT(DDRD, pinNum);
 270:	91 b3       	in	r25, 0x11	; 17
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	08 2e       	mov	r0, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_init+0xde>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_init+0xda>
 282:	20 95       	com	r18
 284:	29 23       	and	r18, r25
 286:	21 bb       	out	0x11, r18	; 17
			if(direction == OUT)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	61 f4       	brne	.+24     	; 0x2a4 <DIO_init+0x104>
				SET_BIT(DDRD, pinNum);
 28c:	41 b3       	in	r20, 0x11	; 17
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_init+0xfa>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_init+0xf6>
 29e:	cb 01       	movw	r24, r22
 2a0:	84 2b       	or	r24, r20
 2a2:	81 bb       	out	0x11, r24	; 17
 2a4:	08 95       	ret

000002a6 <DIO_write>:
*/

//WRITE FUN
void DIO_write(uint8_t pinNum, uint8_t portNum, uint8_t value)
{
	switch(portNum)
 2a6:	62 34       	cpi	r22, 0x42	; 66
 2a8:	49 f1       	breq	.+82     	; 0x2fc <DIO_write+0x56>
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <DIO_write+0xc>
 2ac:	61 34       	cpi	r22, 0x41	; 65
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <DIO_write+0x1a>
 2b0:	08 95       	ret
 2b2:	63 34       	cpi	r22, 0x43	; 67
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_write+0x12>
 2b6:	40 c0       	rjmp	.+128    	; 0x338 <DIO_write+0x92>
 2b8:	64 34       	cpi	r22, 0x44	; 68
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_write+0x18>
 2bc:	5a c0       	rjmp	.+180    	; 0x372 <DIO_write+0xcc>
 2be:	08 95       	ret
	{
		case  PORT_A:
			if(value == LOW)
 2c0:	41 11       	cpse	r20, r1
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <DIO_write+0x36>
				CLEAR_BIT(PORTA, pinNum);
 2c4:	9b b3       	in	r25, 0x1b	; 27
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	08 2e       	mov	r0, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0x2c>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0x28>
 2d6:	20 95       	com	r18
 2d8:	29 23       	and	r18, r25
 2da:	2b bb       	out	0x1b, r18	; 27
			if(value == HIGH)
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <DIO_write+0x3c>
 2e0:	64 c0       	rjmp	.+200    	; 0x3aa <DIO_write+0x104>
				SET_BIT(PORTA, pinNum);
 2e2:	4b b3       	in	r20, 0x1b	; 27
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_write+0x4a>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_write+0x46>
 2f4:	cb 01       	movw	r24, r22
 2f6:	84 2b       	or	r24, r20
 2f8:	8b bb       	out	0x1b, r24	; 27
 2fa:	08 95       	ret
		break;
		case  PORT_B:
			if(value == LOW)
 2fc:	41 11       	cpse	r20, r1
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <DIO_write+0x72>
				CLEAR_BIT(PORTB, pinNum);
 300:	98 b3       	in	r25, 0x18	; 24
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	08 2e       	mov	r0, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_write+0x68>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_write+0x64>
 312:	20 95       	com	r18
 314:	29 23       	and	r18, r25
 316:	28 bb       	out	0x18, r18	; 24
			if(value == HIGH)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <DIO_write+0x78>
 31c:	46 c0       	rjmp	.+140    	; 0x3aa <DIO_write+0x104>
				SET_BIT(PORTB, pinNum);
 31e:	48 b3       	in	r20, 0x18	; 24
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_write+0x86>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_write+0x82>
 330:	cb 01       	movw	r24, r22
 332:	84 2b       	or	r24, r20
 334:	88 bb       	out	0x18, r24	; 24
 336:	08 95       	ret

		break;
		case  PORT_C:
			if(value == LOW)
 338:	41 11       	cpse	r20, r1
 33a:	0c c0       	rjmp	.+24     	; 0x354 <DIO_write+0xae>
				CLEAR_BIT(PORTC, pinNum);
 33c:	95 b3       	in	r25, 0x15	; 21
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	08 2e       	mov	r0, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_write+0xa4>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_write+0xa0>
 34e:	20 95       	com	r18
 350:	29 23       	and	r18, r25
 352:	25 bb       	out	0x15, r18	; 21
			if(value == HIGH)
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	49 f5       	brne	.+82     	; 0x3aa <DIO_write+0x104>
				SET_BIT(PORTC, pinNum);
 358:	45 b3       	in	r20, 0x15	; 21
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_write+0xc0>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_write+0xbc>
 36a:	cb 01       	movw	r24, r22
 36c:	84 2b       	or	r24, r20
 36e:	85 bb       	out	0x15, r24	; 21
 370:	08 95       	ret

		break;
		case  PORT_D:
			if(value == LOW)
 372:	41 11       	cpse	r20, r1
 374:	0c c0       	rjmp	.+24     	; 0x38e <DIO_write+0xe8>
				CLEAR_BIT(PORTD, pinNum);
 376:	92 b3       	in	r25, 0x12	; 18
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	08 2e       	mov	r0, r24
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_write+0xde>
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_write+0xda>
 388:	20 95       	com	r18
 38a:	29 23       	and	r18, r25
 38c:	22 bb       	out	0x12, r18	; 18
			if(value == HIGH)
 38e:	41 30       	cpi	r20, 0x01	; 1
 390:	61 f4       	brne	.+24     	; 0x3aa <DIO_write+0x104>
				SET_BIT(PORTD, pinNum);
 392:	42 b3       	in	r20, 0x12	; 18
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_write+0xfa>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_write+0xf6>
 3a4:	cb 01       	movw	r24, r22
 3a6:	84 2b       	or	r24, r20
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret

000003ac <DIO_toggle>:
*/

// TOGGLE
void DIO_toggle(uint8_t pinNum, uint8_t portNum)
{
		switch (portNum)
 3ac:	62 34       	cpi	r22, 0x42	; 66
 3ae:	b1 f0       	breq	.+44     	; 0x3dc <DIO_toggle+0x30>
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <DIO_toggle+0xc>
 3b2:	61 34       	cpi	r22, 0x41	; 65
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <DIO_toggle+0x16>
 3b6:	08 95       	ret
 3b8:	63 34       	cpi	r22, 0x43	; 67
 3ba:	e9 f0       	breq	.+58     	; 0x3f6 <DIO_toggle+0x4a>
 3bc:	64 34       	cpi	r22, 0x44	; 68
 3be:	41 f1       	breq	.+80     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3c0:	08 95       	ret
		{
			case PORT_A:
				TOGGLE_BIT(PORTA,pinNum);
 3c2:	4b b3       	in	r20, 0x1b	; 27
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_toggle+0x24>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_toggle+0x20>
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 27       	eor	r24, r20
 3d8:	8b bb       	out	0x1b, r24	; 27
			break;
 3da:	08 95       	ret
			case PORT_B:
				TOGGLE_BIT(PORTB,pinNum);
 3dc:	48 b3       	in	r20, 0x18	; 24
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_toggle+0x3e>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_toggle+0x3a>
 3ee:	cb 01       	movw	r24, r22
 3f0:	84 27       	eor	r24, r20
 3f2:	88 bb       	out	0x18, r24	; 24
			break;
 3f4:	08 95       	ret
			case PORT_C:
				TOGGLE_BIT(PORTC,pinNum);
 3f6:	45 b3       	in	r20, 0x15	; 21
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	84 27       	eor	r24, r20
 40c:	85 bb       	out	0x15, r24	; 21
			break;
 40e:	08 95       	ret
			case PORT_D:
			TOGGLE_BIT(PORTD,pinNum);
 410:	42 b3       	in	r20, 0x12	; 18
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	b9 01       	movw	r22, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	cb 01       	movw	r24, r22
 424:	84 27       	eor	r24, r20
 426:	82 bb       	out	0x12, r24	; 18
 428:	08 95       	ret

0000042a <DIO_read>:
*/

//READING
void DIO_read(uint8_t pinNum, uint8_t portNum,uint8_t *value)
{
	switch (portNum)
 42a:	62 34       	cpi	r22, 0x42	; 66
 42c:	09 f1       	breq	.+66     	; 0x470 <DIO_read+0x46>
 42e:	18 f4       	brcc	.+6      	; 0x436 <DIO_read+0xc>
 430:	61 34       	cpi	r22, 0x41	; 65
 432:	39 f0       	breq	.+14     	; 0x442 <DIO_read+0x18>
 434:	08 95       	ret
 436:	63 34       	cpi	r22, 0x43	; 67
 438:	91 f1       	breq	.+100    	; 0x49e <DIO_read+0x74>
 43a:	64 34       	cpi	r22, 0x44	; 68
 43c:	09 f4       	brne	.+2      	; 0x440 <DIO_read+0x16>
 43e:	46 c0       	rjmp	.+140    	; 0x4cc <DIO_read+0xa2>
 440:	08 95       	ret
	{
		case PORT_A:
			*value = READ_BIT(PINA, pinNum);
 442:	99 b3       	in	r25, 0x19	; 25
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	08 2e       	mov	r0, r24
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_read+0x28>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_read+0x24>
 456:	29 2f       	mov	r18, r25
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	26 23       	and	r18, r22
 45c:	37 23       	and	r19, r23
 45e:	b9 01       	movw	r22, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_read+0x3c>
 462:	75 95       	asr	r23
 464:	67 95       	ror	r22
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_read+0x38>
 46a:	fa 01       	movw	r30, r20
 46c:	60 83       	st	Z, r22
		break;
 46e:	08 95       	ret
		case PORT_B:
			*value = READ_BIT(PINB, pinNum);
 470:	96 b3       	in	r25, 0x16	; 22
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	08 2e       	mov	r0, r24
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_read+0x56>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_read+0x52>
 484:	29 2f       	mov	r18, r25
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	26 23       	and	r18, r22
 48a:	37 23       	and	r19, r23
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_read+0x6a>
 490:	75 95       	asr	r23
 492:	67 95       	ror	r22
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_read+0x66>
 498:	fa 01       	movw	r30, r20
 49a:	60 83       	st	Z, r22
		break;
 49c:	08 95       	ret
		case PORT_C:
			*value = READ_BIT(PINC, pinNum);
 49e:	93 b3       	in	r25, 0x13	; 19
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	08 2e       	mov	r0, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_read+0x84>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_read+0x80>
 4b2:	29 2f       	mov	r18, r25
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	26 23       	and	r18, r22
 4b8:	37 23       	and	r19, r23
 4ba:	b9 01       	movw	r22, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_read+0x98>
 4be:	75 95       	asr	r23
 4c0:	67 95       	ror	r22
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_read+0x94>
 4c6:	fa 01       	movw	r30, r20
 4c8:	60 83       	st	Z, r22
		break;
 4ca:	08 95       	ret
		case PORT_D:
			*value = READ_BIT(PIND, pinNum);
 4cc:	90 b3       	in	r25, 0x10	; 16
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	08 2e       	mov	r0, r24
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_read+0xb2>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_read+0xae>
 4e0:	29 2f       	mov	r18, r25
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	26 23       	and	r18, r22
 4e6:	37 23       	and	r19, r23
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_read+0xc6>
 4ec:	75 95       	asr	r23
 4ee:	67 95       	ror	r22
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_read+0xc2>
 4f4:	fa 01       	movw	r30, r20
 4f6:	60 83       	st	Z, r22
 4f8:	08 95       	ret

000004fa <INT0_init>:

#include "interrupt.h"

void INT0_init()
{
	GICR |= (1<<6);
 4fa:	8b b7       	in	r24, 0x3b	; 59
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x03;
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	85 bf       	out	0x35, r24	; 53
	SREG |= (1<<7);
 504:	8f b7       	in	r24, 0x3f	; 63
 506:	80 68       	ori	r24, 0x80	; 128
 508:	8f bf       	out	0x3f, r24	; 63
 50a:	08 95       	ret

0000050c <TIMER0_start>:
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	89 f0       	breq	.+34     	; 0x532 <TIMER0_start+0x26>
 510:	28 f4       	brcc	.+10     	; 0x51c <TIMER0_start+0x10>
 512:	88 23       	and	r24, r24
 514:	41 f0       	breq	.+16     	; 0x526 <TIMER0_start+0x1a>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	49 f0       	breq	.+18     	; 0x52c <TIMER0_start+0x20>
 51a:	08 95       	ret
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	61 f0       	breq	.+24     	; 0x538 <TIMER0_start+0x2c>
 520:	84 30       	cpi	r24, 0x04	; 4
 522:	69 f0       	breq	.+26     	; 0x53e <TIMER0_start+0x32>
 524:	08 95       	ret
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	83 bf       	out	0x33, r24	; 51
 52a:	08 95       	ret
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	83 bf       	out	0x33, r24	; 51
 530:	08 95       	ret
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	83 bf       	out	0x33, r24	; 51
 536:	08 95       	ret
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	83 bf       	out	0x33, r24	; 51
 53c:	08 95       	ret
 53e:	85 e0       	ldi	r24, 0x05	; 5
 540:	83 bf       	out	0x33, r24	; 51
 542:	08 95       	ret

00000544 <TIMER1_start>:
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	89 f0       	breq	.+34     	; 0x56a <TIMER1_start+0x26>
 548:	28 f4       	brcc	.+10     	; 0x554 <TIMER1_start+0x10>
 54a:	88 23       	and	r24, r24
 54c:	41 f0       	breq	.+16     	; 0x55e <TIMER1_start+0x1a>
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	49 f0       	breq	.+18     	; 0x564 <TIMER1_start+0x20>
 552:	08 95       	ret
 554:	83 30       	cpi	r24, 0x03	; 3
 556:	61 f0       	breq	.+24     	; 0x570 <TIMER1_start+0x2c>
 558:	84 30       	cpi	r24, 0x04	; 4
 55a:	69 f0       	breq	.+26     	; 0x576 <TIMER1_start+0x32>
 55c:	08 95       	ret
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	8e bd       	out	0x2e, r24	; 46
 562:	08 95       	ret
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	8e bd       	out	0x2e, r24	; 46
 568:	08 95       	ret
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	8e bd       	out	0x2e, r24	; 46
 56e:	08 95       	ret
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	8e bd       	out	0x2e, r24	; 46
 574:	08 95       	ret
 576:	85 e0       	ldi	r24, 0x05	; 5
 578:	8e bd       	out	0x2e, r24	; 46
 57a:	08 95       	ret

0000057c <TIMER0_delay>:
 57c:	cf 93       	push	r28
 57e:	c6 2f       	mov	r28, r22
 580:	82 bf       	out	0x32, r24	; 50
 582:	84 2f       	mov	r24, r20
 584:	0e 94 86 02 	call	0x50c	; 0x50c <TIMER0_start>
 588:	c1 11       	cpse	r28, r1
 58a:	0d c0       	rjmp	.+26     	; 0x5a6 <TIMER0_delay+0x2a>
 58c:	08 b6       	in	r0, 0x38	; 56
 58e:	00 fe       	sbrs	r0, 0
 590:	fd cf       	rjmp	.-6      	; 0x58c <TIMER0_delay+0x10>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	88 bf       	out	0x38, r24	; 56
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <TIMER0_delay+0x38>
 598:	08 b6       	in	r0, 0x38	; 56
 59a:	00 fe       	sbrs	r0, 0
 59c:	fd cf       	rjmp	.-6      	; 0x598 <TIMER0_delay+0x1c>
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	28 bf       	out	0x38, r18	; 56
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <TIMER0_delay+0x2e>
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	2c 2f       	mov	r18, r28
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	82 17       	cp	r24, r18
 5b0:	93 07       	cpc	r25, r19
 5b2:	94 f3       	brlt	.-28     	; 0x598 <TIMER0_delay+0x1c>
 5b4:	13 be       	out	0x33, r1	; 51
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <TIMER1_delay>:
 5ba:	cf 93       	push	r28
 5bc:	c6 2f       	mov	r28, r22
 5be:	9d bd       	out	0x2d, r25	; 45
 5c0:	8c bd       	out	0x2c, r24	; 44
 5c2:	84 2f       	mov	r24, r20
 5c4:	0e 94 a2 02 	call	0x544	; 0x544 <TIMER1_start>
 5c8:	c1 11       	cpse	r28, r1
 5ca:	0d c0       	rjmp	.+26     	; 0x5e6 <TIMER1_delay+0x2c>
 5cc:	08 b6       	in	r0, 0x38	; 56
 5ce:	02 fe       	sbrs	r0, 2
 5d0:	fd cf       	rjmp	.-6      	; 0x5cc <TIMER1_delay+0x12>
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	88 bf       	out	0x38, r24	; 56
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <TIMER1_delay+0x3a>
 5d8:	08 b6       	in	r0, 0x38	; 56
 5da:	02 fe       	sbrs	r0, 2
 5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <TIMER1_delay+0x1e>
 5de:	24 e0       	ldi	r18, 0x04	; 4
 5e0:	28 bf       	out	0x38, r18	; 56
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <TIMER1_delay+0x30>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	2c 2f       	mov	r18, r28
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	82 17       	cp	r24, r18
 5f0:	93 07       	cpc	r25, r19
 5f2:	94 f3       	brlt	.-28     	; 0x5d8 <TIMER1_delay+0x1e>
 5f4:	1e bc       	out	0x2e, r1	; 46
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <car_toggleYELLOWLED>:

//==============FOR YELLOW LEDS=============//

static void car_toggleYELLOWLED()
{
	LED_toggle(1, PORT_A);
 5fa:	61 e4       	ldi	r22, 0x41	; 65
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 c8 00 	call	0x190	; 0x190 <LED_toggle>
 602:	08 95       	ret

00000604 <ped_toggleYELLOWLED>:
}

static void ped_toggleYELLOWLED()
{
	LED_toggle(1, PORT_B);
 604:	62 e4       	ldi	r22, 0x42	; 66
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 c8 00 	call	0x190	; 0x190 <LED_toggle>
 60c:	08 95       	ret

0000060e <init_leds>:

#include "led_control.h"

void init_leds()
{
	LED_init(0, PORT_A);
 60e:	61 e4       	ldi	r22, 0x41	; 65
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>
	LED_init(1, PORT_A);
 616:	61 e4       	ldi	r22, 0x41	; 65
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>
	LED_init(2, PORT_A);
 61e:	61 e4       	ldi	r22, 0x41	; 65
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>

	LED_init(0, PORT_B);
 626:	62 e4       	ldi	r22, 0x42	; 66
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>
	LED_init(1, PORT_B);
 62e:	62 e4       	ldi	r22, 0x42	; 66
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>
	LED_init(2, PORT_B);
 636:	62 e4       	ldi	r22, 0x42	; 66
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 bc 00 	call	0x178	; 0x178 <LED_init>
	
	BUTTON_init(2, PORT_D);
 63e:	64 e4       	ldi	r22, 0x44	; 68
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 90 00 	call	0x120	; 0x120 <BUTTON_init>
	
	INT0_init();
 646:	0e 94 7d 02 	call	0x4fa	; 0x4fa <INT0_init>
 64a:	08 95       	ret

0000064c <carREDLED_ON>:
//==============FOR RED LEDS=============//

//MAKE THE RED LED OF THE CAR ON
void carREDLED_ON()
{
	LED_on(0, PORT_A);
 64c:	61 e4       	ldi	r22, 0x41	; 65
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 c0 00 	call	0x180	; 0x180 <LED_on>
	LED_off(1,PORT_A);
 654:	61 e4       	ldi	r22, 0x41	; 65
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(2,PORT_A);
 65c:	61 e4       	ldi	r22, 0x41	; 65
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
 664:	08 95       	ret

00000666 <pedREDLED_ON>:
}

//MAKE THE RED LED OF THE PED ON
void pedREDLED_ON()
{
	LED_on(0, PORT_B);
 666:	62 e4       	ldi	r22, 0x42	; 66
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	0e 94 c0 00 	call	0x180	; 0x180 <LED_on>
	LED_off(1,PORT_B);
 66e:	62 e4       	ldi	r22, 0x42	; 66
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(2,PORT_B);
 676:	62 e4       	ldi	r22, 0x42	; 66
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
 67e:	08 95       	ret

00000680 <carGREENLED_ON>:
//==============FOR GREEN LEDS=============//

//MAKE THE GREEN LED OF THE CAR ON
void carGREENLED_ON()
{
	LED_off(0, PORT_A);
 680:	61 e4       	ldi	r22, 0x41	; 65
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(1,PORT_A);
 688:	61 e4       	ldi	r22, 0x41	; 65
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_on(2,PORT_A);
 690:	61 e4       	ldi	r22, 0x41	; 65
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	0e 94 c0 00 	call	0x180	; 0x180 <LED_on>
 698:	08 95       	ret

0000069a <pedGREENLED_ON>:
}

//MAKE THE GREEN LED OF THE PED ON
void pedGREENLED_ON()
{
	LED_off(0, PORT_B);
 69a:	62 e4       	ldi	r22, 0x42	; 66
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(1,PORT_B);
 6a2:	62 e4       	ldi	r22, 0x42	; 66
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_on(2,PORT_B);
 6aa:	62 e4       	ldi	r22, 0x42	; 66
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	0e 94 c0 00 	call	0x180	; 0x180 <LED_on>
 6b2:	08 95       	ret

000006b4 <carYELLOWLED_BLINKING>:
and the initial value = 12 => 0x0c
*/

// MAKE THE YELLOW LED OF CARS BLINKING
void carYELLOWLED_BLINKING()
{
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
	for (int i = 0; i < 5; i++)
 6b8:	c0 e0       	ldi	r28, 0x00	; 0
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <carYELLOWLED_BLINKING+0x1a>
	{
		car_toggleYELLOWLED();
 6be:	0e 94 fd 02 	call	0x5fa	; 0x5fa <car_toggleYELLOWLED>
		TIMER0_delay(0x0c, 4, _1024_PRE);
 6c2:	44 e0       	ldi	r20, 0x04	; 4
 6c4:	64 e0       	ldi	r22, 0x04	; 4
 6c6:	8c e0       	ldi	r24, 0x0C	; 12
 6c8:	0e 94 be 02 	call	0x57c	; 0x57c <TIMER0_delay>
*/

// MAKE THE YELLOW LED OF CARS BLINKING
void carYELLOWLED_BLINKING()
{
	for (int i = 0; i < 5; i++)
 6cc:	21 96       	adiw	r28, 0x01	; 1
 6ce:	c5 30       	cpi	r28, 0x05	; 5
 6d0:	d1 05       	cpc	r29, r1
 6d2:	ac f3       	brlt	.-22     	; 0x6be <carYELLOWLED_BLINKING+0xa>
	{
		car_toggleYELLOWLED();
		TIMER0_delay(0x0c, 4, _1024_PRE);
	}
}
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <pedcarYELLOWLED_BLINKING>:

//MAKE THE YELLOW LED OF PED BLINKING
void pedcarYELLOWLED_BLINKING()
{
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
	for (int i = 0; i < 5; i++)
 6de:	c0 e0       	ldi	r28, 0x00	; 0
 6e0:	d0 e0       	ldi	r29, 0x00	; 0
 6e2:	0b c0       	rjmp	.+22     	; 0x6fa <pedcarYELLOWLED_BLINKING+0x20>
	{
		ped_toggleYELLOWLED();
 6e4:	0e 94 02 03 	call	0x604	; 0x604 <ped_toggleYELLOWLED>
		car_toggleYELLOWLED();
 6e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <car_toggleYELLOWLED>
		TIMER1_delay(0x0BDC, 2, _8_PRE);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	8c ed       	ldi	r24, 0xDC	; 220
 6f2:	9b e0       	ldi	r25, 0x0B	; 11
 6f4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TIMER1_delay>
}

//MAKE THE YELLOW LED OF PED BLINKING
void pedcarYELLOWLED_BLINKING()
{
	for (int i = 0; i < 5; i++)
 6f8:	21 96       	adiw	r28, 0x01	; 1
 6fa:	c5 30       	cpi	r28, 0x05	; 5
 6fc:	d1 05       	cpc	r29, r1
 6fe:	94 f3       	brlt	.-28     	; 0x6e4 <pedcarYELLOWLED_BLINKING+0xa>
	{
		ped_toggleYELLOWLED();
		car_toggleYELLOWLED();
		TIMER1_delay(0x0BDC, 2, _8_PRE);
	}
}
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <pedLEDS_OFF>:

//CLOSE ALL LEDS OF PED
void pedLEDS_OFF()
{
	LED_off(0, PORT_B);
 706:	62 e4       	ldi	r22, 0x42	; 66
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(1,PORT_B);
 70e:	62 e4       	ldi	r22, 0x42	; 66
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
	LED_off(2,PORT_B);
 716:	62 e4       	ldi	r22, 0x42	; 66
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
 71e:	08 95       	ret

00000720 <car_GREENLED_ON>:
}

////////////////////////////////////////////////////////////////
void car_GREENLED_ON()
{
	carGREENLED_ON();
 720:	0e 94 40 03 	call	0x680	; 0x680 <carGREENLED_ON>
	TIMER0_delay(0x0c, 20, _1024_PRE);
 724:	44 e0       	ldi	r20, 0x04	; 4
 726:	64 e1       	ldi	r22, 0x14	; 20
 728:	8c e0       	ldi	r24, 0x0C	; 12
 72a:	0e 94 be 02 	call	0x57c	; 0x57c <TIMER0_delay>
 72e:	08 95       	ret

00000730 <car_REDLED_ON>:
}

void car_REDLED_ON()
{
	carREDLED_ON();
 730:	0e 94 26 03 	call	0x64c	; 0x64c <carREDLED_ON>
	TIMER0_delay(0x0c, 20, _1024_PRE);
 734:	44 e0       	ldi	r20, 0x04	; 4
 736:	64 e1       	ldi	r22, 0x14	; 20
 738:	8c e0       	ldi	r24, 0x0C	; 12
 73a:	0e 94 be 02 	call	0x57c	; 0x57c <TIMER0_delay>
 73e:	08 95       	ret

00000740 <interruptfn1>:
}

void interruptfn1()
{
	pedREDLED_ON();
 740:	0e 94 33 03 	call	0x666	; 0x666 <pedREDLED_ON>
	pedcarYELLOWLED_BLINKING();
 744:	0e 94 6d 03 	call	0x6da	; 0x6da <pedcarYELLOWLED_BLINKING>
	pedGREENLED_ON();
 748:	0e 94 4d 03 	call	0x69a	; 0x69a <pedGREENLED_ON>
	carREDLED_ON();
 74c:	0e 94 26 03 	call	0x64c	; 0x64c <carREDLED_ON>
	TIMER1_delay(0x0bdc, 10, _8_PRE);
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	6a e0       	ldi	r22, 0x0A	; 10
 754:	8c ed       	ldi	r24, 0xDC	; 220
 756:	9b e0       	ldi	r25, 0x0B	; 11
 758:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TIMER1_delay>
	pedcarYELLOWLED_BLINKING();
 75c:	0e 94 6d 03 	call	0x6da	; 0x6da <pedcarYELLOWLED_BLINKING>
	pedREDLED_ON();
 760:	0e 94 33 03 	call	0x666	; 0x666 <pedREDLED_ON>
	carGREENLED_ON();
 764:	0e 94 40 03 	call	0x680	; 0x680 <carGREENLED_ON>
	pedLEDS_OFF();
 768:	0e 94 83 03 	call	0x706	; 0x706 <pedLEDS_OFF>
 76c:	08 95       	ret

0000076e <interruptfn2>:
}

void interruptfn2()
{
	pedGREENLED_ON();
 76e:	0e 94 4d 03 	call	0x69a	; 0x69a <pedGREENLED_ON>
	carREDLED_ON();
 772:	0e 94 26 03 	call	0x64c	; 0x64c <carREDLED_ON>
	TIMER1_delay(0x0bdc, 10, _8_PRE);
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	6a e0       	ldi	r22, 0x0A	; 10
 77a:	8c ed       	ldi	r24, 0xDC	; 220
 77c:	9b e0       	ldi	r25, 0x0B	; 11
 77e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TIMER1_delay>
	pedLEDS_OFF();
 782:	0e 94 83 03 	call	0x706	; 0x706 <pedLEDS_OFF>
 786:	08 95       	ret

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
